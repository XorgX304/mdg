import unittest
import datetime
import uuid
from random import randint, choice
from data_generation.awk_data_generator import AWKDataGenerator
from data_generation.data_generator import DataGenerator


class PythonDataGeneratorTestCase(unittest.TestCase):
    """Test cases for all data generated by Python"""

    def setUp(self):
        self.dg = DataGenerator('../data_files')
        self.col = uuid.uuid4().hex  # Random col name

    def test_rand_date(self):
        for i in range(50):
            self.assertIsInstance(self.dg.random_date(), datetime.date)
            self.assertTrue(
                datetime.date(1970, 1, 1) <= self.dg.random_date() <= datetime.date(2018, 12, 31)
            )

    def test_date_range(self):
        for i in range(50):
            start, end = sorted((self.dg.random_date(), self.dg.random_date()))  # Two random dates
            options = {
                self.col + 'dateRangeStart': str(start),
                self.col + 'dateRangeEnd': str(end)
            }
            self.assertTrue(start <= self.dg.date_range(self.col, options) <= end)

    def test_longitude(self):
        for i in range(50):
            self.assertTrue(-180 <= self.dg.longitude() <= 180)

    def test_latitude(self):
        for i in range(50):
            self.assertTrue(-90 <= self.dg.latitude() <= 90)

    def test_uuid(self):
        self.assertIsInstance(self.dg.gen_uuid(), uuid.UUID)

    def test_boolean(self):
        pass

    def test_gender(self):
        pass

    def test_null(self):
        self.assertIsNone(self.dg.null_val())



class AWKDataGeneratorTestCase(unittest.TestCase):
    """Test cases for all data generated by AWK"""

    def setUp(self):
        awk_generator = AWKDataGenerator()