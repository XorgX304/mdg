import unittest
import datetime
import uuid
from data_generation.data_generator import DataGenerator


class PythonDataGeneratorTestCase(unittest.TestCase):
    """Test cases for all data generated by Python"""

    def setUp(self):
        self.dg = DataGenerator('../data_files')
        self.col = uuid.uuid4().hex  # Random col name
        self.hexa_chars = '0123456789abcdef:'  # Colon here as separator
        self.test_cases = 5000
        self.rgb_table = str.maketrans(dict.fromkeys('(),'))
        self.randomly_picked = \
            ['url', 'month', 'company', 'email', 'last-names', 'street-name', 'weekday', 'first-names',
             'street-addr', 'domain', 'user-agent', 'cc-type', 'color-name', 'username', 'country']

    def test_rand_date(self):
        for i in range(self.test_cases):
            self.assertIsInstance(self.dg.random_date(), datetime.date)
            self.assertTrue(
                datetime.date(1970, 1, 1) <= self.dg.random_date() <= datetime.date(2018, 12, 31)
            )

    def test_date_range(self):
        for i in range(self.test_cases):
            start_date = 'dateRangeStart'
            end_date = 'dateRangeEnd'
            start, end = sorted((self.dg.random_date(), self.dg.random_date()))  # Two random dates
            options = {
                self.col + start_date: str(start),
                self.col + end_date: str(end)
            }
            self.assertTrue(start <= self.dg.date_range(self.col, options) <= end)

    def test_longitude(self):
        for i in range(self.test_cases):
            self.assertTrue(-180 <= self.dg.longitude() <= 180)

    def test_latitude(self):
        for i in range(self.test_cases):
            self.assertTrue(-90 <= self.dg.latitude() <= 90)

    def test_uuid(self):
        self.assertIsInstance(self.dg.gen_uuid(), uuid.UUID)

    def test_null(self):
        self.assertIsNone(self.dg.null_val())

    def test_ipv6(self):
        for i in range(self.test_cases):
            ipv6 = self.dg.ipv6()
            self.assertTrue(len(ipv6.split(':')) == 8)
            self.assertTrue(all(c in self.hexa_chars for c in ipv6))

    def test_ipv4(self):
        for i in range(self.test_cases):
            ipv4 = self.dg.ipv4().split('.')
            for octet in ipv4:
                self.assertTrue(octet.isnumeric())
                self.assertTrue(255 >= int(octet) >= 0)

    def test_mac_addr(self):
        for i in range(self.test_cases):
            mac = self.dg.mac_address()
            self.assertTrue(len(mac.split(':')) == 6)
            self.assertTrue(all(c in self.hexa_chars for c in mac))

    def test_hex_color(self):
        for i in range(self.test_cases):
            hex_color = self.dg.hex_color()
            self.assertTrue(len(hex_color) == 7)
            self.assertTrue(all(c in self.hexa_chars for c in hex_color.replace('#', '')))

    def test_shorthex(self):
        for i in range(self.test_cases):
            short_hex_color = self.dg.short_hex_color()
            self.assertTrue(len(short_hex_color) == 4)
            self.assertTrue(all(c in self.hexa_chars for c in short_hex_color.replace('#', '')))

    def test_rgb(self):
        for i in range(self.test_cases):
            rgb = self.dg.rgb().translate(self.rgb_table).split()
            for num in rgb:
                self.assertTrue(num.isnumeric())
                self.assertTrue(255 >= int(num) >= 0)

    def test_rgba(self):
        for i in range(self.test_cases):
            rgba = self.dg.rgba().translate(self.rgb_table).split()
            for num in rgba[:3]:
                self.assertTrue(num.isnumeric())
                self.assertTrue(255 >= int(num) >= 0)
            self.assertTrue(1 >= float(rgba[3]) >= 0)

    def test_random_element(self):
        for i in range(self.test_cases):
            for key in self.randomly_picked:
                data = self.dg.commands.get(key)
                self.assertIsNotNone(self.dg.rand_element(data))
                self.assertTrue(self.dg.rand_element(data) in data)
